{2,
{28,0,0,0,0,1,0,0,00000000-0000-0000-0000-000000000000,1,
{1,0},0,0,1,1,1,0,1,0,
{0},
{0},1,
{17,
{-1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},9,"ФормаКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{6,3,0,1},
{0,0,0},1,
{0,0,1},0,1},0,"","",1,
{17,
{0},0,0,0,7,"Navigator",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{6,3,0,1},
{0,0,0},0,0,1}
},"&НаКлиенте
Перем юТест;
&НаКлиенте
Перем ИдетОтладка;

&НаКлиенте
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	юТест = ЮнитТестирование;
	
	ВсеТесты = Новый Массив;
	
	ВсеТесты.Добавить(""Тест_должен_Сделать_Запуск_Тестов_По_ТестовойФиче_Когда_Нет_Исходников_EPF"");
	
	Возврат ВсеТесты;
	
КонецФункции

&НаКлиенте
Процедура ПередЗапускомТеста() Экспорт
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗапускаТеста() Экспорт
	
	
КонецПроцедуры


&НаКлиенте
Функция ЗаполнитьСтруктуруИзФайла(ПутьКФайлу)
	СтруктураПараметров = Новый Структура();
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ПутьКФайлу,""windows-1251"");
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		Поз = Найти(Стр,""="");
		Если Поз = 0 Тогда
			ВызватьИсключение ""В строке "" + Стр + "" не найден символ """"=""""."";
		КонецЕсли;	 
		
		Ключ = Лев(Стр,Поз-1);
		Значение = Сред(Стр,Поз+1);
		
		СтруктураПараметров.Вставить(Ключ,Значение);
	КонецЦикла;
	Текст.Закрыть();
	
	Возврат СтруктураПараметров;
КонецФункции

&НаКлиенте
Процедура ПолучитьПутьКОбработке_vanessa_behavior_изПараметровЗапуска(ПутьК_vanessa_behavior,КаталогИнструментов,КаталогФич)
	ПутьК_vanessa_behavior = Неопределено;
	
	
	
	ИмяФайла = ютест.ДанныеТекущегоТеста().ПолныйПуть;
	//Сообщить(""ИмяФайлаТеста="" + ИмяФайла);
	Файл = Новый Файл(ИмяФайла);
	
	ФайлРодитель1 = Новый Файл(Файл.Путь);
	
	ФайлКонфиг = Новый Файл(ФайлРодитель1.Путь + ""\tests.config"");
	Если НЕ ФайлКонфиг.Существует() Тогда
		ВызватьИсключение ""Не найден файл конфигурации тестов!"";
	КонецЕсли;	 
	
	ПараметрыИзФайла = ЗаполнитьСтруктуруИзФайла(ФайлКонфиг.ПолноеИмя);
	
	ПутьК_vanessa_behavior = ПараметрыИзФайла.ПутьК_vanessa_behavior;
	КаталогИнструментов    = ПараметрыИзФайла.КаталогИнструментов;
	КаталогФич             = ПараметрыИзФайла.КаталогФич;
КонецПроцедуры


&НаСервере
Функция ПодключитьВнешнююОбработку(АдресХранилища)
	Возврат ВнешниеОбработки.Подключить(АдресХранилища,,Ложь);    
КонецФункции


&НаКлиенте
Процедура ПроверитьЧтоВФичуПроставилсяТег(ПутьКФайлу)
	Файл = Новый Файл(ПутьКФайлу);
	Путь = Файл.Путь;
	Если Прав(Путь,1) = ""\"" Тогда
		Путь = Лев(Путь,СтрДлина(Путь)-1);
	КонецЕсли;	 
	ОжидаемоеИмяФичи = ""@[ИмяФичи]="" + Файл.ИмяБезРасширения + "";"" + Путь;
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ПутьКФайлу,""UTF-8"");
	
	
	
	Нашли = Ложь;
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		Если НРег(Стр) = НРег(ОжидаемоеИмяФичи) Тогда
			Нашли = Истина;
			Прервать;
		КонецЕсли;	 
		
	КонецЦикла;
	Текст.Закрыть();
	
	юТест.ПроверитьРавенство(Нашли,Истина,""В фиче нашли нужный тег: "" + ОжидаемоеИмяФичи);
	
КонецПроцедуры



&НаКлиенте
Процедура ЗаписатьФайлФичи(ИмяФайла)
	УдалитьФайлы(ИмяФайла);
	
	
	Стр = ""# encoding: utf-8
	|# language: ru
	|
	|
	|@[ИмяФичи]=Test;\features\SelfTests
	|
	|
	|
	|
	|Функционал: Проверка генерации простого epf файла.
	|
	|Как Пользователь
	|Я Хочу: чтобы чтобы при нажатии на кнопку Выполнить в толстой форме происходила геренация epf файла
	|
	|Сценарий: Генерация EPF в режиме толстых форм
	| Когда Запущена сервисная база в режиме толстых форм
	| И создана процедура куда передано число 1
	| И создана процедура куда передана строка 'тест'
	| И создана процедура куда передана дата 08.04.1981
	| И не будет обнаружено число в конце слова3
	| И не будет обнаружено число в конце слова с тире-3
	| Тогда будет создан файл 'SimpleGenerateTest.epf'
	| 
	|"";
	
	Текст = Новый ЗаписьТекста(ИмяФайла, КодировкаТекста.UTF8);
	Текст.ЗаписатьСтроку(Стр);
	Текст.Закрыть(); 
КонецПроцедуры

&НаСервере
Функция ПолучитьМакетСервер(ИмяМакета)
	текОбъект = ЭтаФорма.РеквизитФормыВЗначение(""Объект"");
	Макет = текОбъект.ПолучитьМакет(ИмяМакета);
	Возврат Макет;
КонецФункции


&НаКлиенте
Процедура ОбработатьКаталогФич(КаталогФич)
	Файл = Новый Файл(КаталогФич);
	Если НЕ Файл.ЭтоКаталог() Тогда
		ВызватьИсключение ""Для каталога фич должен быть передан каталог, а не файл!"";
	КонецЕсли;	 
	
	Если Прав(КаталогФич,1) = ""\"" Тогда
		КаталогФич = Лев(КаталогФич,СтрДлина(КаталогФич)-1);
	КонецЕсли;	 
КонецПроцедуры


&НаКлиенте
Процедура Тест_должен_Сделать_Запуск_Тестов_По_ТестовойФиче_Когда_Нет_Исходников_EPF() Экспорт
	ПутьК_vanessa_behavior = """";
	КаталогИнструментов    = """";
	КаталогФич             = """";
	ПолучитьПутьКОбработке_vanessa_behavior_изПараметровЗапуска(ПутьК_vanessa_behavior,КаталогИнструментов,КаталогФич);
	
	Если ПутьК_vanessa_behavior = Неопределено Тогда
		Если Не ИдетОтладка Тогда
			Сообщить(""Не передан путь к vanessa_behavior.epf!"");
			ВызватьИсключение ""Не передан путь к vanessa_behavior.epf!"";
		КонецЕсли;	  
		
		ПутьК_vanessa_behavior = ""E:\commons\Rep\vanessa-bdd\vanessa-behavior.epf"";
		КаталогИнструментов    = ""E:\commons\Rep\vanessa-bdd"";
		КаталогФич             = ""E:\Temp\feature"";
	КонецЕсли;	 
	
	
	
	ОбработатьКаталогФич(КаталогФич);
	
	ПереданныйКаталог = КаталогФич;
	ТекущаяФича  = КаталогФич + ""\Test.feature"";
	
	
	ПутьКЛогуКукумбера = КаталогИнструментов + ""\CucumberConsoleLog.txt"";
	УдалитьФайлы(ПутьКЛогуКукумбера);
	
	
	
	
	
	Сообщить(""Работаю с фичей: "" + ТекущаяФича);
	
	ПутьКСгенерированномуEPF = ПереданныйКаталог + ""\step_definitions\Test.epf"";
	УдалитьФайлы(ПереданныйКаталог);
	СоздатьКаталог(ПереданныйКаталог);
	СоздатьКаталог(ПереданныйКаталог + ""\step_definitions"");
	
	
	ЗаписатьФайлФичи(ТекущаяФича);
	
	
	
	
	
	АдресХранилища = """";
	Результат = ПоместитьФайл(АдресХранилища, ПутьК_vanessa_behavior, ,Ложь);
	ИмяОбработки = ПодключитьВнешнююОбработку(АдресХранилища);
	
	
	
	
	МакетEPF = ПолучитьМакетСервер(""EPF"");
	МакетEPF.Записать(ПутьКСгенерированномуEPF);
	
	
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить(""TestRun"",Истина);
	ДопПараметры.Вставить(""КаталогИнструментов"",КаталогИнструментов);
	ДопПараметры.Вставить(""КаталогФич"",ТекущаяФича);
	ДопПараметры.Вставить(""ВыполнитьОбработкуПриОткрытии"",Истина);
	ДопПараметры.Вставить(""ЗакрытьФормуПослеВыполненияОбработки"",Истина);
	
	Форма = ПолучитьФорму(""ВнешняяОбработка."" + ИмяОбработки + "".Форма.УправляемаяФорма"");
	Форма.ПроставитьТегВФичу(ТекущаяФича);
	ОткрытьФормуМодально(""ВнешняяОбработка."" + ИмяОбработки + "".Форма.УправляемаяФорма"",ДопПараметры);
	
	
	
	Файл = Новый Файл(ПутьКЛогуКукумбера);
	юТест.ПроверитьРавенство(Файл.Существует(),Истина,""Существует лог кукумбера."");
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ПутьКЛогуКукумбера,""UTF-8"");
	
	Нашли = Ложь;
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		Если Найти(Стр,""1 scenario (1 passed)"") > 0 Тогда
			Нашли = Истина;
		КонецЕсли;	 
		
	КонецЦикла;	
	
	Текст.Закрыть();
	
	
	юТест.ПроверитьРавенство(Нашли,Истина,""В логе кукумбера нашли запись о прохождении сценария."");
	
КонецПроцедуры

ИдетОтладка = Ложь;
//ИдетОтладка = Истина;

Если ИдетОтладка Тогда
	Сообщить(""ИдетОтладка"");
КонецЕсли;	









",
{4,2,
{9,
{1},0,"Объект",
{1,0},
{"Pattern",
{"#",46282281-48b4-46da-8efa-b167f8b65d44}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},1,0,0,0,
{0,0},
{0,0}
},
{9,
{2},0,"ЕстьПоддержкаНемодальныхФорм",
{1,1,
{"ru","Есть поддержка немодальных форм"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},0,0,
{#base64:77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxTZXR0
aW5ncyB4bWxucz0iaHR0cDovL3Y4LjFjLnJ1LzguMS9kYXRhLWNvbXBvc2l0aW9u
LXN5c3RlbS9zZXR0aW5ncyIgeG1sbnM6ZGNzY29yPSJodHRwOi8vdjguMWMucnUv
OC4xL2RhdGEtY29tcG9zaXRpb24tc3lzdGVtL2NvcmUiIHhtbG5zOnN0eWxlPSJo
dHRwOi8vdjguMWMucnUvOC4xL2RhdGEvdWkvc3R5bGUiIHhtbG5zOnN5cz0iaHR0
cDovL3Y4LjFjLnJ1LzguMS9kYXRhL3VpL2ZvbnRzL3N5c3RlbSIgeG1sbnM6djg9
Imh0dHA6Ly92OC4xYy5ydS84LjEvZGF0YS9jb3JlIiB4bWxuczp2OHVpPSJodHRw
Oi8vdjguMWMucnUvOC4xL2RhdGEvdWkiIHhtbG5zOndlYj0iaHR0cDovL3Y4LjFj
LnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93ZWIiIHhtbG5zOndpbj0iaHR0cDovL3Y4
LjFjLnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93aW5kb3dzIiB4bWxuczp4cz0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiLz4=}
},
{0,0},
{0,0},
{0,0},
{0,0}
}