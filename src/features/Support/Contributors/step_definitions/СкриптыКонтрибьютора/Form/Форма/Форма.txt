//начало текста модуля

///////////////////////////////////////////////////
//Служебные функции и процедуры
///////////////////////////////////////////////////

&НаКлиенте
// контекст фреймворка Vanessa-Behavior
Перем Ванесса;
 
&НаКлиенте
// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.
Перем Контекст Экспорт;
 
&НаКлиенте
// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-Behavior.
Перем КонтекстСохраняемый Экспорт;

&НаКлиенте
// Служебная функция.
Функция ДобавитьШагВМассивТестов(МассивТестов,Снипет,ИмяПроцедуры,ПредставлениеТеста = Неопределено,Транзакция = Неопределено,Параметр = Неопределено)
	Структура = Новый Структура;
	Структура.Вставить("Снипет",Снипет);
	Структура.Вставить("ИмяПроцедуры",ИмяПроцедуры);
	Структура.Вставить("ИмяПроцедуры",ИмяПроцедуры);
	Структура.Вставить("ПредставлениеТеста",ПредставлениеТеста);
	Структура.Вставить("Транзакция",Транзакция);
	Структура.Вставить("Параметр",Параметр);
	МассивТестов.Добавить(Структура);
КонецФункции

&НаКлиенте
// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;

	//описание параметров
	//ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,Транзакция,Параметр);

	ДобавитьШагВМассивТестов(ВсеТесты,"ПроверенаУстановка(Парам01)","ПроверенаУстановка","Дано: проверена установка ""git""");
	ДобавитьШагВМассивТестов(ВсеТесты,"ЯСклонировалВеткуВоВременныйКаталог(Парам01,Парам02)","ЯСклонировалВеткуВоВременныйКаталог","И я склонировал ""https://github.com/silverbulleters/vanessa-behavior.git"" ветку ""develop"" во временный каталог");
	ДобавитьШагВМассивТестов(ВсеТесты,"ПроверенаУстановкаДополнительныхБиблиотекOscript()","ПроверенаУстановкаДополнительныхБиблиотекOscript","И проверена установка дополнительных библиотек Oscript");
	ДобавитьШагВМассивТестов(ВсеТесты,"ПроверенаУстановкаВерсийПлатформы1С()","ПроверенаУстановкаВерсийПлатформы1С","И проверена установка версий платформы 1С");
	ДобавитьШагВМассивТестов(ВсеТесты,"СуществуетКонфигурационныйФайлСамопроверкиДляКаждойВерсии1С()","СуществуетКонфигурационныйФайлСамопроверкиДляКаждойВерсии1С","И существует конфигурационный файл самопроверки для каждой версии 1С");
	ДобавитьШагВМассивТестов(ВсеТесты,"ЯВызываюКомандуСистемыВКаталогеПроекта(Парам01)","ЯВызываюКомандуСистемыВКаталогеПроекта","Когда: я вызываю команду системы ""oscript ./tools/contribution.os update-conf"" в каталоге проекта");
	ДобавитьШагВМассивТестов(ВсеТесты,"СоздаютсяСервисныеКонфигурацииБезОшибок(Парам01)","СоздаютсяСервисныеКонфигурацииБезОшибок","Тогда: создаются ""3"" сервисные конфигурации без ошибок");
	ДобавитьШагВМассивТестов(ВсеТесты,"ЯВызываюКомандуВКаталогеПроекта(Парам01)","ЯВызываюКомандуВКаталогеПроекта","Когда: я вызываю команду ""oscript ./tools/contribution.os check-my-build"" в каталоге проекта");
	ДобавитьШагВМассивТестов(ВсеТесты,"ЯПолучаюОтчётОСессииПроверкиBehavior()","ЯПолучаюОтчётОСессииПроверкиBehavior","Тогда: я получаю отчёт о сессии проверки behavior");
	ДобавитьШагВМассивТестов(ВсеТесты,"ВОтчётеПроверкиНетДефектов()","ВОтчётеПроверкиНетДефектов","и в отчёте проверки нет дефектов");
	ДобавитьШагВМассивТестов(ВсеТесты,"ЯИзменилМодульВСервисныхКонфигурациях()","ЯИзменилМодульВСервисныхКонфигурациях","Дано: я изменил модуль в сервисных конфигурациях");
	ДобавитьШагВМассивТестов(ВсеТесты,"ИзмененныйМодульСодержитсяВКаталогеИсходниковКонфигураций()","ИзмененныйМодульСодержитсяВКаталогеИсходниковКонфигураций","Тогда: измененный модуль содержится в каталоге исходников конфигураций");
	ДобавитьШагВМассивТестов(ВсеТесты,"ВКаталогеGitНастроекСкопированыВсеБиблиотекиPrecommit()","ВКаталогеGitНастроекСкопированыВсеБиблиотекиPrecommit","Тогда: в каталоге git настроек скопированы все библиотеки precommit");
	ДобавитьШагВМассивТестов(ВсеТесты,"КаталогИсходныхКодовНеИмеетНеЗафиксированныхВGitИзменений()","КаталогИсходныхКодовНеИмеетНеЗафиксированныхВGitИзменений","И каталог исходных кодов не имеет не зафиксированных в git изменений");
	ДобавитьШагВМассивТестов(ВсеТесты,"ВозникаетИсключениеСРекомендациейВначалеВыгрузитьИзмененныеМодули()","ВозникаетИсключениеСРекомендациейВначалеВыгрузитьИзмененныеМодули","Тогда: возникает исключение с рекомендацией вначале выгрузить измененные модули");

	Возврат ВсеТесты;
КонецФункции
	
&НаСервере
// Служебная функция.
Функция ПолучитьМакетСервер(ИмяМакета)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);
КонецФункции
	
&НаКлиенте
// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакетСервер(ИмяМакета);
КонецФункции



///////////////////////////////////////////////////
//Работа со сценариями
///////////////////////////////////////////////////

&НаКлиенте
// Процедура выполняется перед началом каждого сценария
Процедура ПередНачаломСценария() Экспорт
	
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняется перед окончанием каждого сценария
Процедура ПередОкончаниемСценария() Экспорт
	
КонецПроцедуры



///////////////////////////////////////////////////
//Реализация шагов
///////////////////////////////////////////////////

&НаКлиенте
//Дано: проверена установка "git"
//@ПроверенаУстановка(Парам01)
Процедура ПроверенаУстановка(внешняяУтилитаКоманднойСтроки) Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);

	утилитаПроверки = "where";
	
	Информация = Новый СистемнаяИнформация;
    Если Информация.ТипПлатформы = ТипПлатформы.Linux_x86 Или Информация.ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
		утилитаПроверки = "whereis";		
	КонецЕсли;
	 	
	результатПроверки = ПолучитьИмяВременногоФайла();
	
	КомандаСистемы(утилитаПроверки + " " + внешняяУтилитаКоманднойСтроки + " > " + результатПроверки);
	
	чтениеРезультатаПроверки = Новый ЧтениеТекста;
	чтениеРезультатаПроверки.Открыть(результатПроверки);
	путьКУтилите = "";
	
	строкаНахожденияУтилиты = чтениеРезультатаПроверки.ПрочитатьСтроку();
	Пока строкаНахожденияУтилиты <> Неопределено Цикл
		путьКУтилите = путьКУтилите + строкаНахожденияУтилиты + "
		|";
		
		строкаНахожденияУтилиты = чтениеРезультатаПроверки.ПрочитатьСтроку();
		
	КонецЦикла;
	
	чтениеРезультатаПроверки.Закрыть();
	
	Если ПустаяСтрока(путьКУтилите) Тогда
		ВызватьИсключение "Утилита " + внешняяУтилитаКоманднойСтроки + " не доступна для запуска из командной строки";
	КонецЕсли;
		
	
	Ванесса.Отладка("Утилита " + внешняяУтилитаКоманднойСтроки + " установлена в 
		|" + путьКУтилите);
	
	
	УдалитьФайлы(результатПроверки); 
	
КонецПроцедуры

&НаКлиенте
//И я склонировал "https://github.com/silverbulleters/vanessa-behavior.git" ветку "develop" во временный каталог
//@ЯСклонировалВеткуВоВременныйКаталог(Парам01,Парам02)
Процедура ЯСклонировалВеткуВоВременныйКаталог(адресРепозитория,веткаРепозитория) Экспорт
	
	временныеФайлыСистемы = КаталогВременныхФайлов();
	временныйФайл = ПолучитьИмяВременногоФайла();
	указательНаВременныйФайл = Новый Файл(временныйФайл);
	
	имяВременногоКаталога = указательНаВременныйФайл.ИмяБезРасширения;
		
	командаКлонирования =  "git clone -b " + веткаРепозитория + " " + адресРепозитория + " ./" + имяВременногоКаталога + "/";
	
	КомандаСистемы(командаКлонирования, временныеФайлыСистемы); 
	
	ЧистыйКаталогКлонирования = временныеФайлыСистемы + имяВременногоКаталога;
	
	КонтекстСохраняемый.Вставить("ЧистыйКаталогКлонирования", ЧистыйКаталогКлонирования);	
	
	Ванесса.Отладка("Склонирован репозиторий behavior в " + ЧистыйКаталогКлонирования);
	
	сервисныйКаталогGit = Новый Файл(ЧистыйКаталогКлонирования + "\.git");
	
	Если НЕ сервисныйКаталогGit.Существует() или НЕ сервисныйКаталогGit.ЭтоКаталог() Тогда
		ВызватьИсключение "Команда клонирования репозитория " + командаКлонирования + " выполнилась некорректно";
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
//И проверена установка дополнительных библиотек Oscript
//@ПроверенаУстановкаДополнительныхБиблиотекOscript()
Процедура ПроверенаУстановкаДополнительныхБиблиотекOscript() Экспорт
	
	временныйСкрипт = ПолучитьИмяВременногоФайла("os");
	
	текстСкрипта = Новый ЗаписьТекста();
	
	текстСкрипта.Открыть(временныйСкрипт);
	
	текстСкрипта.Записать("
	|#Использовать v8runner
	|#Использовать logos
	|#Использовать json
	|
	|УправлениеКонфигуратором = Новый УправлениеКонфигуратором();
	|парсерJSON = Новый ПарсерJSON();
	|Лог = Логирование.ПолучитьЛог(""behavior.build.log"");
	|");
	
	текстСкрипта.Закрыть();

	РезультатВыполнения = 0;
	ЗапуститьПриложение("oscript " + временныйСкрипт, КаталогВременныхФайлов(),Истина,РезультатВыполнения);
	
	Если РезультатВыполнения > 0 Тогда
		ВызватьИсключение "Проверка 1С платформы с поомощью oscript не проведена";
 	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
//И проверена установка версий платформы 1С
//@ПроверенаУстановкаВерсийПлатформы1С()
Процедура ПроверенаУстановкаВерсийПлатформы1С() Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	
	//Схитрим через библиотеки
	
	временныйСкрипт = ПолучитьИмяВременногоФайла("os");
	
	текстСкрипта = Новый ЗаписьТекста();
	
	текстСкрипта.Открыть(временныйСкрипт);
	
	текстСкрипта.Записать("
	|#Использовать v8runner
	|
	|УправлениеКонфигуратором = Новый УправлениеКонфигуратором();
	|УправлениеКонфигуратором.ПолучитьПутьКВерсииПлатформы(""8.3"");
//	|УправлениеКонфигуратором.ПолучитьПутьКВерсииПлатформы(""8.4"");
	|");
	
	текстСкрипта.Закрыть();

	РезультатВыполнения = 0;
	ЗапуститьПриложение("oscript " + временныйСкрипт, КаталогВременныхФайлов(),Истина,РезультатВыполнения);
	
	Ванесса.Отладка("вызываю oscript " + временныйСкрипт);
	
	
	Если РезультатВыполнения > 0 Тогда
		ВызватьИсключение "Проверка 1С платформы с поомощью oscript не проведена ";
 	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
//И существует конфигурационный файл самопроверки для каждой версии 1С
//@СуществуетКонфигурационныйФайлСамопроверкиДляКаждойВерсии1С()
Процедура СуществуетКонфигурационныйФайлСамопроверкиДляКаждойВерсии1С() Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	ВызватьИсключение "Не реализовано.";
КонецПроцедуры

&НаКлиенте
//Когда: я вызываю команду системы "oscript ./tools/contribution.os update-conf" в каталоге проекта
//@ЯВызываюКомандуСистемыВКаталогеПроекта(Парам01)
Процедура ЯВызываюКомандуСистемыВКаталогеПроекта(Парам01) Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	ВызватьИсключение "Не реализовано.";
КонецПроцедуры

&НаКлиенте
//Тогда: создаются "3" сервисные конфигурации без ошибок
//@СоздаютсяСервисныеКонфигурацииБезОшибок(Парам01)
Процедура СоздаютсяСервисныеКонфигурацииБезОшибок(Парам01) Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	ВызватьИсключение "Не реализовано.";
КонецПроцедуры

&НаКлиенте
//Когда: я вызываю команду "oscript ./tools/contribution.os check-my-build" в каталоге проекта
//@ЯВызываюКомандуВКаталогеПроекта(Парам01)
Процедура ЯВызываюКомандуВКаталогеПроекта(Парам01) Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	ВызватьИсключение "Не реализовано.";
КонецПроцедуры

&НаКлиенте
//Тогда: я получаю отчёт о сессии проверки behavior
//@ЯПолучаюОтчётОСессииПроверкиBehavior()
Процедура ЯПолучаюОтчётОСессииПроверкиBehavior() Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	ВызватьИсключение "Не реализовано.";
КонецПроцедуры

&НаКлиенте
//и в отчёте проверки нет дефектов
//@ВОтчётеПроверкиНетДефектов()
Процедура ВОтчётеПроверкиНетДефектов() Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	ВызватьИсключение "Не реализовано.";
КонецПроцедуры

&НаКлиенте
//Дано: я изменил модуль в сервисных конфигурациях
//@ЯИзменилМодульВСервисныхКонфигурациях()
Процедура ЯИзменилМодульВСервисныхКонфигурациях() Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	ВызватьИсключение "Не реализовано.";
КонецПроцедуры

&НаКлиенте
//Тогда: измененный модуль содержится в каталоге исходников конфигураций
//@ИзмененныйМодульСодержитсяВКаталогеИсходниковКонфигураций()
Процедура ИзмененныйМодульСодержитсяВКаталогеИсходниковКонфигураций() Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	ВызватьИсключение "Не реализовано.";
КонецПроцедуры

&НаКлиенте
//Тогда: в каталоге git настроек скопированы все библиотеки precommit
//@ВКаталогеGitНастроекСкопированыВсеБиблиотекиPrecommit()
Процедура ВКаталогеGitНастроекСкопированыВсеБиблиотекиPrecommit() Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	ВызватьИсключение "Не реализовано.";
КонецПроцедуры

&НаКлиенте
//И каталог исходных кодов не имеет не зафиксированных в git изменений
//@КаталогИсходныхКодовНеИмеетНеЗафиксированныхВGitИзменений()
Процедура КаталогИсходныхКодовНеИмеетНеЗафиксированныхВGitИзменений() Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	ВызватьИсключение "Не реализовано.";
КонецПроцедуры

&НаКлиенте
//Тогда: возникает исключение с рекомендацией вначале выгрузить измененные модули
//@ВозникаетИсключениеСРекомендациейВначалеВыгрузитьИзмененныеМодули()
Процедура ВозникаетИсключениеСРекомендациейВначалеВыгрузитьИзмененныеМодули() Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	ВызватьИсключение "Не реализовано.";
КонецПроцедуры

//окончание текста модуля