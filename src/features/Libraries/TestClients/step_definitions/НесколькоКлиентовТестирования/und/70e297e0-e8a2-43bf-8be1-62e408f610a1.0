{3,
{42,0,0,0,0,1,0,0,00000000-0000-0000-0000-000000000000,1,
{1,0},0,0,1,1,1,0,1,0,
{0,0,0},
{0},1,
{21,
{-1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,9,"ФормаКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,1},0,1,0,0,0,3,3},0,"","",1,
{21,
{0},0,0,0,7,"Navigator",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,0,1,0,1,
{10,
{0},0,0,0,0,"NavigatorExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},1,"",0,0,0,0,0,0,3,3,0,0,0},"//начало текста модуля

///////////////////////////////////////////////////
//Служебные функции и процедуры
///////////////////////////////////////////////////

&НаКлиенте
// контекст фреймворка Vanessa-Behavior
Перем Ванесса;

&НаКлиенте
// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.
Перем Контекст Экспорт;

&НаКлиенте
// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-Behavior.
Перем КонтекстСохраняемый Экспорт;

&НаКлиенте
// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;
	
	//описание параметров
	//Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,Транзакция,Параметр);
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ЯПодключаюКлиентТестированияИзТаблицыКлиентовТестирования(ИмяКлиентаТестирования)"",""ЯПодключаюКлиентТестированияИзТаблицыКлиентовТестирования"",""И Я подключаю клиент тестирования """"ИмяКлиентаТестирования"""" из таблицы клиентов тестирования"");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ЯОтключаюТекущегоКлиентТестирования()"",""ЯОтключаюТекущегоКлиентТестирования"",""И Я отключаю текущего клиент тестирования"");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ЯПодключаюКлиентТестированияИзТаблицыКлиентовТестированияОтИмениСПаролем(ИмяКлиентаТестирования,Логин,Пароль)"",""ЯПодключаюКлиентТестированияИзТаблицыКлиентовТестированияОтИмениСПаролем"",""Когда Я подключаю клиент тестирования """"ИмяКлиентаТестирования"""" из таблицы клиентов тестирования от имени """"Логин"""" с паролем """"Пароль"""""");
	
	Возврат ВсеТесты;
КонецФункции

&НаСервере
// Служебная функция.
Функция ПолучитьМакетСервер(ИмяМакета)
	ОбъектСервер = РеквизитФормыВЗначение(""Объект"");
	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);
КонецФункции

&НаКлиенте
// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакетСервер(ИмяМакета);
КонецФункции



///////////////////////////////////////////////////
//Работа со сценариями
///////////////////////////////////////////////////

&НаКлиенте
// Процедура выполняется перед началом каждого сценария
Процедура ПередНачаломСценария() Экспорт
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняется перед окончанием каждого сценария
Процедура ПередОкончаниемСценария() Экспорт
	
КонецПроцедуры



///////////////////////////////////////////////////

&НаКлиенте
Процедура ЗапомнитьКлиентаТестированияВСохраняемомКонтексте(КлиентТестирования) 
	Если КонтекстСохраняемый.Свойство(""ТестовоеПриложение"") Тогда     
		Если ТипЗнч(КонтекстСохраняемый.ТестовоеПриложение) = Тип(""ТестируемоеПриложение"") Тогда
			Попытка
				КонтекстСохраняемый.РазорватьСоединение();
			Исключение
				//	
			КонецПопытки;
			
			КонтекстСохраняемый.ТестовоеПриложение = Неопределено;
		КонецЕсли;
		
		КонтекстСохраняемый.ТестовоеПриложение = КлиентТестирования;
	Иначе
		КонтекстСохраняемый.Вставить(""ТестовоеПриложение"", КлиентТестирования);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьГлавноеОкноКлиентаТестирования(КлиентТестирования) 
	Результат = Неопределено;
	
	ИскомыеОкна = КлиентТестирования.НайтиОбъекты(Тип(""ТестируемоеОкноКлиентскогоПриложения""));
	Для Каждого НайденноеОкно Из ИскомыеОкна Цикл
		Если НайденноеОкно.Основное Тогда
			Результат = НайденноеОкно;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ЗапомнитьГлавноеОкноКлиентаТестированияВСохраняемомКонтексте(ГлавноеОкноКлиентаТестирования) 
	Если КонтекстСохраняемый.Свойство(""ГлавноеОкноТестируемого"") Тогда     
		Если ТипЗнч(КонтекстСохраняемый.ГлавноеОкноТестируемого) = Тип(""ТестируемоеОкноКлиентскогоПриложения"") Тогда
			КонтекстСохраняемый.ГлавноеОкноТестируемого = Неопределено;
		КонецЕсли;
		
		КонтекстСохраняемый.ГлавноеОкноТестируемого = ГлавноеОкноКлиентаТестирования;
	Иначе
		КонтекстСохраняемый.Вставить(""ГлавноеОкноТестируемого"", ГлавноеОкноКлиентаТестирования);
	КонецЕсли;
КонецПроцедуры

///////////////////////////////////////////////////

&НаКлиенте
//И Я подключаю клиент тестирования ""ИмяКлиентаТестирования"" из таблицы клиентов тестирования
//@ЯПодключаюКлиентТестированияИзТаблицыКлиентовТестирования(ИмяКлиентаТестирования)
Процедура ЯПодключаюКлиентТестированияИзТаблицыКлиентовТестирования(ИмяКлиентаТестирования) Экспорт

	Если НЕ ПодключитьTestClientИзТаблицыКлиентовТестирования(ИмяКлиентаТестирования, """") Тогда
		ВызватьИсключение ""Не смог подключить TestClient!"";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПодключитьTestClientИзТаблицыКлиентовТестирования(ИмяКлиентаТестирования, ДопПараметр = """")

	КлиентТестирования = Ванесса.ПолучитьКлиентаТестирования(ИмяКлиентаТестирования, ДопПараметр);
	Если КлиентТестирования = Неопределено Тогда
		ВызватьИсключение ""Не удалось подключить клиент тестирования."";
	КонецЕсли;
	
	ЗапомнитьКлиентаТестированияВСохраняемомКонтексте(КлиентТестирования);
	
	ОкноКлиентскогоПриложения = ПолучитьГлавноеОкноКлиентаТестирования(КлиентТестирования);
	Если ОкноКлиентскогоПриложения = Неопределено Тогда
		ВызватьИсключение ""Не удалось получить главное окно клиента тестирования."";
	КонецЕсли;
	
	ЗапомнитьГлавноеОкноКлиентаТестированияВСохраняемомКонтексте(ОкноКлиентскогоПриложения);
	
	ОкноКлиентскогоПриложения.Активизировать();
	
	Возврат Истина;

КонецФункции

&НаКлиенте
//И Я отключаю текущего клиент тестирования
//@ЯОтключаюТекущегоКлиентТестирования()
Процедура ЯОтключаюТекущегоКлиентТестирования() Экспорт
	Если КонтекстСохраняемый.Свойство(""ТестовоеПриложение"") Тогда     
		Если ТипЗнч(КонтекстСохраняемый.ТестовоеПриложение) = Тип(""ТестируемоеПриложение"") Тогда
			Попытка
				КонтекстСохраняемый.РазорватьСоединение();
			Исключение
				//	
			КонецПопытки;
			
			КонтекстСохраняемый.ТестовоеПриложение = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить(""Подключен"", Истина);
	
	НайденныеСтроки = Ванесса.ДанныеКлиентовТестирования.НайтиСтроки(ПараметрыОтбора);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		НайденнаяСтрока.Подключен = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
//Когда Я подключаю клиент тестирования ""СуриноваИН"" из таблицы клиентов тестирования от имени ""Логин"" с паролем ""Пароль""
//@ЯПодключаюКлиентТестированияИзТаблицыКлиентовТестированияОтИмениСПаролем(ИмяКлиентаТестирования,Логин,Пароль)
Процедура ЯПодключаюКлиентТестированияИзТаблицыКлиентовТестированияОтИмениСПаролем(ИмяКлиентаТестирования, Знач Логин = """", Знач Пароль = """") Экспорт
	
	СтрокаАутентификации = """";
	Логин = СокрЛП(Логин); 
	Пароль = СокрЛП(Пароль);
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(""txt"");
	
	Если Не ПустаяСтрока(Логин) Тогда 
		СтрокаАутентификации = ""/N""+Логин;
		Если Найти(Логин, "" "") > 0 Тогда 
			СтрокаАутентификации = ""/N"""""" + СокрЛП(Логин)+ """""""";
		КонецЕсли;
		
		Если Не ПустаяСтрока(Пароль) Тогда 
			СтрокаАутентификации = СтрокаАутентификации + "" /P""+Пароль;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПодключитьTestClientИзТаблицыКлиентовТестирования(ИмяКлиентаТестирования, ""/out"""""" + ИмяВременногоФайла + """""""" + "" ""+ СтрокаАутентификации) Тогда
		ВызватьИсключение ""Не смог подключить TestClient!"";
	КонецЕсли;
	
КонецПроцедуры

//окончание текста модуля",
{4,1,
{9,
{1},0,"Объект",
{1,0},
{"Pattern",
{"#",1fa267af-3d54-4f70-ac00-718486d7aafd}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},1,0,0,0,
{0,0},
{0,0}
},0,0,
{#base64:77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxTZXR0
aW5ncyB4bWxucz0iaHR0cDovL3Y4LjFjLnJ1LzguMS9kYXRhLWNvbXBvc2l0aW9u
LXN5c3RlbS9zZXR0aW5ncyIgeG1sbnM6ZGNzY29yPSJodHRwOi8vdjguMWMucnUv
OC4xL2RhdGEtY29tcG9zaXRpb24tc3lzdGVtL2NvcmUiIHhtbG5zOnN0eWxlPSJo
dHRwOi8vdjguMWMucnUvOC4xL2RhdGEvdWkvc3R5bGUiIHhtbG5zOnN5cz0iaHR0
cDovL3Y4LjFjLnJ1LzguMS9kYXRhL3VpL2ZvbnRzL3N5c3RlbSIgeG1sbnM6djg9
Imh0dHA6Ly92OC4xYy5ydS84LjEvZGF0YS9jb3JlIiB4bWxuczp2OHVpPSJodHRw
Oi8vdjguMWMucnUvOC4xL2RhdGEvdWkiIHhtbG5zOndlYj0iaHR0cDovL3Y4LjFj
LnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93ZWIiIHhtbG5zOndpbj0iaHR0cDovL3Y4
LjFjLnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93aW5kb3dzIiB4bWxuczp4cz0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiLz4=}
},
{0,0},
{0,0},
{0,0},
{0,0},0,0}